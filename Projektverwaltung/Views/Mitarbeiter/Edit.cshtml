@model Projektverwaltung.Models.MitarbeiterViewModel

@{
    ViewBag.Title = "Edit";

    var allFunctions = ViewBag.AllFunctions as IEnumerable<Funktion>;
}

<h2>Mitarbeiter Bearbeiten</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Mitarbeiter</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Vorname, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Vorname, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Vorname, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Abteilung, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Abteilung, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Abteilung, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Pensum, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Pensum, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Pensum, "", new { @class = "text-danger" })
        </div>
    </div>

    
    <div class="form-group">
        @Html.LabelFor(model => model.Funktionen, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">

                @foreach (var item in allFunctions)
                {
                    //Loop through all Functions and add different behaviour depending on checked or not
                    if (Model.Funktionen.Any(x => x.id == item.id))
                    {
                        <div><input type="checkbox" checked onchange="deselectFunctionFromEmployee(@item.id, @Model.Id);"/>&nbsp; @item.name</div>
                    }
                    else
                    {
                        <div><input type="checkbox" onchange="selectFunctionFromEmployee(@item.id, @Model.Id);" />&nbsp; @item.name</div>
                    }
                }

        </div>
    </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Speichern" class="btn btn-default" />
            </div>
        </div>
    </div>
}

    <div>
        @Html.ActionLink("Zurück zur Übersicht", "Index")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")

        
    }

    <script>
    //Function used to deselect a Function for an employee, called on "onchange" event
    function deselectFunctionFromEmployee(functionId, employeeId) {
        window.location.href = '@Url.Action("RemoveFunctionFromEmployee", "Mitarbeiter")?functionId=' + functionId + '&employeeId=' + employeeId;
    }
    
    //Function used to select a Function for an employee, called on "onchange" event
    function selectFunctionFromEmployee(functionId, employeeId) {
        window.location.href = '@Url.Action("AddFunctionToEmployee", "Mitarbeiter")?functionId=' + functionId + ' &employeeId=' + employeeId;
    }
    </script>


